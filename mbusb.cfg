# 采用新的命名规范：
# absolute directory name:
# 含设备名的：
# x_root
# x_abs_dirname=$x_root$x_dirname
# x_abs_name=$x_root$x_name=$x_root$x_dirname$x_basename
# 不含设备名的： 
# x_name=$x_dirname$x_basename
# x_dirname
# x_basename




# Partition holding files

# root, prefix 是从 grubx64.efi 所使用的 grub.cfg
# 设定的。

# __root, __prefix 是对应于自定义的一些配置的路径。
# 如果要完全基于 grub-mkstandalone 工作，那么，就不能改变
# root 和 prefix 的值，因为其他的位置可能没有 相应的 mod 等文件。

# 基于 grub-mkstandalone 的方法，默认的变量如下： 
#root=memdisk
#prefix=(memdisk)/boot/grub



#probe -u $root --set=rootuuid
probe -u $__root --set=rootuuid

# 下面的方法是另一种设备文件路径的写法，
# 对应于相应的 /dev/sdX 或者 grub的 hdX：
# 就这里的情况来说，这样就建立了 
#$__root 和 $imgdevpath 之间的对应关系。 
set imgdevpath="/dev/disk/by-uuid/$rootuuid"
export imgdevpath rootuuid

# Custom variables
#set isopath="/boot/iso"

# 此处需要注意，后续在调用相关的路径时，
# 需要把 $__root 部分去掉，然后和
# $imgdevpath 对应的 系统挂载位置拼接才能
# 找到对应的文件。
# 具体参考我的相关后续处理：
# 添加了 一个 loopback_path 变量来处理这种情况。
set isopath="$__root/boot/iso"
export isopath

# Load modules
insmod regexp
insmod all_video

# MultiBoot USB menu
submenu "Multiboot ->" {
  # Warning for 32-bit systems
  if ! cpuid -l; then
    clear
    echo "This is a 32-bit computer."
    echo "You won't get to use 64-bit software on it."
    echo
    echo -n "To continue, press ESC or wait 10 seconds... "
    sleep --interruptible 10
    echo
    echo
  fi

  # Load custom configuration
#  if [ -e "$prefix/mbusb.cfg.local" ]; then
#    source "$prefix/mbusb.cfg.local"
#  fi

  if [ -e "$__prefix/multibootusb.git/mbusb.cfg.local" ]; then
    source "$__prefix/multibootusb.git/mbusb.cfg.local"
  fi


  # Load configuration files
  echo -n "Loading configuration files... "
#  for cfgfile in $prefix/mbusb.d/*.d/*.cfg; do
#    source "$cfgfile"
#  done

  for cfgfile in $__prefix/multibootusb.git/mbusb.d/*.d/*.cfg; do
    source "$cfgfile"
  done

}





